export const AnswerIdField = {
  kind: 'primitive',
  name: 'id',
  type: 'ID',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerTypeField = {
  kind: 'enum',
  name: 'type',
  type: 'ReactionType',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerParentField = {
  kind: 'relation',
  name: 'parent',
  type: 'Reaction',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./reaction')).ReactionModel,
  asRelation: () => AnswerParentRelation,
} as const;
export const AnswerParentRelation = {
  name: 'parent',
  field: AnswerParentField,
  sourceModel: () => AnswerModel,
  targetModel: async () => (await import('./reaction')).ReactionModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => AnswerParentReverseRelation,
} as const;
export const AnswerParentReverseRelation = {
  name: 'childAnswers',
  field: AnswerParentField,
  sourceModel: async () => (await import('./reaction')).ReactionModel,
  targetModel: () => AnswerModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => AnswerParentRelation,
  singularName: 'childAnswer',
  singularLabel: 'Child Answer',
} as const;
export const AnswerContentField = {
  kind: 'primitive',
  name: 'content',
  type: 'String',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerCreatedAtField = {
  kind: 'primitive',
  name: 'createdAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerCreatedByField = {
  kind: 'relation',
  name: 'createdBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => AnswerCreatedByRelation,
} as const;
export const AnswerCreatedByRelation = {
  name: 'createdBy',
  field: AnswerCreatedByField,
  sourceModel: () => AnswerModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => AnswerCreatedByReverseRelation,
} as const;
export const AnswerCreatedByReverseRelation = {
  name: 'createdAnswers',
  field: AnswerCreatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => AnswerModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => AnswerCreatedByRelation,
  singularName: 'createdAnswer',
  singularLabel: 'Created Answer',
} as const;
export const AnswerUpdatedAtField = {
  kind: 'primitive',
  name: 'updatedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerUpdatedByField = {
  kind: 'relation',
  name: 'updatedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => AnswerUpdatedByRelation,
} as const;
export const AnswerUpdatedByRelation = {
  name: 'updatedBy',
  field: AnswerUpdatedByField,
  sourceModel: () => AnswerModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => AnswerUpdatedByReverseRelation,
} as const;
export const AnswerUpdatedByReverseRelation = {
  name: 'updatedAnswers',
  field: AnswerUpdatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => AnswerModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => AnswerUpdatedByRelation,
  singularName: 'updatedAnswer',
  singularLabel: 'Updated Answer',
} as const;
export const AnswerDeletedField = {
  kind: 'primitive',
  name: 'deleted',
  type: 'Boolean',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: false,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerDeletedAtField = {
  kind: 'primitive',
  name: 'deletedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnswerDeletedByField = {
  kind: 'relation',
  name: 'deletedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => AnswerDeletedByRelation,
} as const;
export const AnswerDeletedByRelation = {
  name: 'deletedBy',
  field: AnswerDeletedByField,
  sourceModel: () => AnswerModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => AnswerDeletedByReverseRelation,
} as const;
export const AnswerDeletedByReverseRelation = {
  name: 'deletedAnswers',
  field: AnswerDeletedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => AnswerModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => AnswerDeletedByRelation,
  singularName: 'deletedAnswer',
  singularLabel: 'Deleted Answer',
} as const;
export const AnswerModel = {
  kind: 'entity',
  name: 'Answer',
  plural: 'Answers',
  description: undefined,
  root: false,
  parent: 'Reaction',
  interfaces: [undefined],
  queriable: true,
  listQueriable: true,
  creatable: true,
  updatable: true,
  deletable: true,
  displayField: undefined,
  defaultOrderBy: undefined,
  deleted: false,
  oldName: undefined,
  pluralField: 'answers',
  slug: 'answers',
  labelPlural: 'Answers',
  label: 'Answer',
  fields: [AnswerIdField, AnswerTypeField, AnswerParentField, AnswerContentField, AnswerCreatedAtField, AnswerCreatedByField, AnswerUpdatedAtField, AnswerUpdatedByField, AnswerDeletedField, AnswerDeletedAtField, AnswerDeletedByField],
  fieldsByName: {
    id: AnswerIdField,
    type: AnswerTypeField,
    parent: AnswerParentField,
    content: AnswerContentField,
    createdAt: AnswerCreatedAtField,
    createdBy: AnswerCreatedByField,
    updatedAt: AnswerUpdatedAtField,
    updatedBy: AnswerUpdatedByField,
    deleted: AnswerDeletedField,
    deletedAt: AnswerDeletedAtField,
    deletedBy: AnswerDeletedByField,
  },
  relations: [AnswerParentRelation, AnswerCreatedByRelation, AnswerUpdatedByRelation, AnswerDeletedByRelation],
  relationsByName: {
    parent: AnswerParentRelation,
    createdBy: AnswerCreatedByRelation,
    updatedBy: AnswerUpdatedByRelation,
    deletedBy: AnswerDeletedByRelation,
  }
  ,
} as const;

