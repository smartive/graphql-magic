export const QuestionIdField = {
  kind: 'primitive',
  name: 'id',
  type: 'ID',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionTypeField = {
  kind: 'enum',
  name: 'type',
  type: 'ReactionType',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionParentField = {
  kind: 'relation',
  name: 'parent',
  type: 'Reaction',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./reaction')).ReactionModel,
  asRelation: () => QuestionParentRelation,
} as const;
export const QuestionParentRelation = {
  name: 'parent',
  field: QuestionParentField,
  sourceModel: () => QuestionModel,
  targetModel: async () => (await import('./reaction')).ReactionModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => QuestionParentReverseRelation,
} as const;
export const QuestionParentReverseRelation = {
  name: 'childQuestions',
  field: QuestionParentField,
  sourceModel: async () => (await import('./reaction')).ReactionModel,
  targetModel: () => QuestionModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => QuestionParentRelation,
  singularName: 'childQuestion',
  singularLabel: 'Child Question',
} as const;
export const QuestionContentField = {
  kind: 'primitive',
  name: 'content',
  type: 'String',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionCreatedAtField = {
  kind: 'primitive',
  name: 'createdAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionCreatedByField = {
  kind: 'relation',
  name: 'createdBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => QuestionCreatedByRelation,
} as const;
export const QuestionCreatedByRelation = {
  name: 'createdBy',
  field: QuestionCreatedByField,
  sourceModel: () => QuestionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => QuestionCreatedByReverseRelation,
} as const;
export const QuestionCreatedByReverseRelation = {
  name: 'createdQuestions',
  field: QuestionCreatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => QuestionModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => QuestionCreatedByRelation,
  singularName: 'createdQuestion',
  singularLabel: 'Created Question',
} as const;
export const QuestionUpdatedAtField = {
  kind: 'primitive',
  name: 'updatedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionUpdatedByField = {
  kind: 'relation',
  name: 'updatedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => QuestionUpdatedByRelation,
} as const;
export const QuestionUpdatedByRelation = {
  name: 'updatedBy',
  field: QuestionUpdatedByField,
  sourceModel: () => QuestionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => QuestionUpdatedByReverseRelation,
} as const;
export const QuestionUpdatedByReverseRelation = {
  name: 'updatedQuestions',
  field: QuestionUpdatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => QuestionModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => QuestionUpdatedByRelation,
  singularName: 'updatedQuestion',
  singularLabel: 'Updated Question',
} as const;
export const QuestionDeletedField = {
  kind: 'primitive',
  name: 'deleted',
  type: 'Boolean',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: false,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionDeletedAtField = {
  kind: 'primitive',
  name: 'deletedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const QuestionDeletedByField = {
  kind: 'relation',
  name: 'deletedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => QuestionDeletedByRelation,
} as const;
export const QuestionDeletedByRelation = {
  name: 'deletedBy',
  field: QuestionDeletedByField,
  sourceModel: () => QuestionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => QuestionDeletedByReverseRelation,
} as const;
export const QuestionDeletedByReverseRelation = {
  name: 'deletedQuestions',
  field: QuestionDeletedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => QuestionModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => QuestionDeletedByRelation,
  singularName: 'deletedQuestion',
  singularLabel: 'Deleted Question',
} as const;
export const QuestionModel = {
  kind: 'entity',
  name: 'Question',
  plural: 'Questions',
  description: undefined,
  root: false,
  parent: 'Reaction',
  interfaces: [undefined],
  queriable: true,
  listQueriable: true,
  creatable: true,
  updatable: true,
  deletable: true,
  displayField: undefined,
  defaultOrderBy: undefined,
  deleted: false,
  oldName: undefined,
  pluralField: 'questions',
  slug: 'questions',
  labelPlural: 'Questions',
  label: 'Question',
  fields: [QuestionIdField, QuestionTypeField, QuestionParentField, QuestionContentField, QuestionCreatedAtField, QuestionCreatedByField, QuestionUpdatedAtField, QuestionUpdatedByField, QuestionDeletedField, QuestionDeletedAtField, QuestionDeletedByField],
  fieldsByName: {
    id: QuestionIdField,
    type: QuestionTypeField,
    parent: QuestionParentField,
    content: QuestionContentField,
    createdAt: QuestionCreatedAtField,
    createdBy: QuestionCreatedByField,
    updatedAt: QuestionUpdatedAtField,
    updatedBy: QuestionUpdatedByField,
    deleted: QuestionDeletedField,
    deletedAt: QuestionDeletedAtField,
    deletedBy: QuestionDeletedByField,
  },
  relations: [QuestionParentRelation, QuestionCreatedByRelation, QuestionUpdatedByRelation, QuestionDeletedByRelation],
  relationsByName: {
    parent: QuestionParentRelation,
    createdBy: QuestionCreatedByRelation,
    updatedBy: QuestionUpdatedByRelation,
    deletedBy: QuestionDeletedByRelation,
  }
  ,
} as const;

