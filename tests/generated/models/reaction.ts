export const ReactionIdField = {
  kind: 'primitive',
  name: 'id',
  type: 'ID',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionTypeField = {
  kind: 'enum',
  name: 'type',
  type: 'ReactionType',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionParentField = {
  kind: 'relation',
  name: 'parent',
  type: 'Reaction',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: () => ReactionModel,
  asRelation: () => ReactionParentRelation,
} as const;
export const ReactionParentRelation = {
  name: 'parent',
  field: ReactionParentField,
  sourceModel: () => ReactionModel,
  targetModel: () => ReactionModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => ReactionParentReverseRelation,
} as const;
export const ReactionParentReverseRelation = {
  name: 'childReactions',
  field: ReactionParentField,
  sourceModel: () => ReactionModel,
  targetModel: () => ReactionModel,
  searchable: undefined,
  label: 'Parent',
  reverse: () => ReactionParentRelation,
  singularName: 'childReaction',
  singularLabel: 'Child Reaction',
} as const;
export const ReactionContentField = {
  kind: 'primitive',
  name: 'content',
  type: 'String',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionCreatedAtField = {
  kind: 'primitive',
  name: 'createdAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionCreatedByField = {
  kind: 'relation',
  name: 'createdBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => ReactionCreatedByRelation,
} as const;
export const ReactionCreatedByRelation = {
  name: 'createdBy',
  field: ReactionCreatedByField,
  sourceModel: () => ReactionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => ReactionCreatedByReverseRelation,
} as const;
export const ReactionCreatedByReverseRelation = {
  name: 'createdReactions',
  field: ReactionCreatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => ReactionModel,
  searchable: undefined,
  label: 'Created By',
  reverse: () => ReactionCreatedByRelation,
  singularName: 'createdReaction',
  singularLabel: 'Created Reaction',
} as const;
export const ReactionUpdatedAtField = {
  kind: 'primitive',
  name: 'updatedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionUpdatedByField = {
  kind: 'relation',
  name: 'updatedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => ReactionUpdatedByRelation,
} as const;
export const ReactionUpdatedByRelation = {
  name: 'updatedBy',
  field: ReactionUpdatedByField,
  sourceModel: () => ReactionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => ReactionUpdatedByReverseRelation,
} as const;
export const ReactionUpdatedByReverseRelation = {
  name: 'updatedReactions',
  field: ReactionUpdatedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => ReactionModel,
  searchable: undefined,
  label: 'Updated By',
  reverse: () => ReactionUpdatedByRelation,
  singularName: 'updatedReaction',
  singularLabel: 'Updated Reaction',
} as const;
export const ReactionDeletedField = {
  kind: 'primitive',
  name: 'deleted',
  type: 'Boolean',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: false,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionDeletedAtField = {
  kind: 'primitive',
  name: 'deletedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const ReactionDeletedByField = {
  kind: 'relation',
  name: 'deletedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => ReactionDeletedByRelation,
} as const;
export const ReactionDeletedByRelation = {
  name: 'deletedBy',
  field: ReactionDeletedByField,
  sourceModel: () => ReactionModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => ReactionDeletedByReverseRelation,
} as const;
export const ReactionDeletedByReverseRelation = {
  name: 'deletedReactions',
  field: ReactionDeletedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => ReactionModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => ReactionDeletedByRelation,
  singularName: 'deletedReaction',
  singularLabel: 'Deleted Reaction',
} as const;
export const ReactionModel = {
  kind: 'entity',
  name: 'Reaction',
  plural: 'Reactions',
  description: undefined,
  root: true,
  parent: undefined,
  interfaces: [undefined],
  queriable: true,
  listQueriable: true,
  creatable: true,
  updatable: true,
  deletable: true,
  displayField: undefined,
  defaultOrderBy: undefined,
  deleted: false,
  oldName: undefined,
  pluralField: 'reactions',
  slug: 'reactions',
  labelPlural: 'Reactions',
  label: 'Reaction',
  fields: [ReactionIdField, ReactionTypeField, ReactionParentField, ReactionContentField, ReactionCreatedAtField, ReactionCreatedByField, ReactionUpdatedAtField, ReactionUpdatedByField, ReactionDeletedField, ReactionDeletedAtField, ReactionDeletedByField],
  fieldsByName: {
    id: ReactionIdField,
    type: ReactionTypeField,
    parent: ReactionParentField,
    content: ReactionContentField,
    createdAt: ReactionCreatedAtField,
    createdBy: ReactionCreatedByField,
    updatedAt: ReactionUpdatedAtField,
    updatedBy: ReactionUpdatedByField,
    deleted: ReactionDeletedField,
    deletedAt: ReactionDeletedAtField,
    deletedBy: ReactionDeletedByField,
  },
  relations: [ReactionParentRelation, ReactionCreatedByRelation, ReactionUpdatedByRelation, ReactionDeletedByRelation],
  relationsByName: {
    parent: ReactionParentRelation,
    createdBy: ReactionCreatedByRelation,
    updatedBy: ReactionUpdatedByRelation,
    deletedBy: ReactionDeletedByRelation,
  }
  ,
} as const;

