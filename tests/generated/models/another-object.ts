export const AnotherObjectIdField = {
  kind: 'primitive',
  name: 'id',
  type: 'ID',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnotherObjectNameField = {
  kind: 'primitive',
  name: 'name',
  type: 'String',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnotherObjectMyselfField = {
  kind: 'relation',
  name: 'myself',
  type: 'AnotherObject',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: () => AnotherObjectModel,
  asRelation: () => AnotherObjectMyselfRelation,
} as const;
export const AnotherObjectMyselfRelation = {
  name: 'myself',
  field: AnotherObjectMyselfField,
  sourceModel: () => AnotherObjectModel,
  targetModel: () => AnotherObjectModel,
  searchable: undefined,
  label: 'Myself',
  reverse: () => AnotherObjectMyselfReverseRelation,
} as const;
export const AnotherObjectMyselfReverseRelation = {
  name: 'self',
  field: AnotherObjectMyselfField,
  sourceModel: () => AnotherObjectModel,
  targetModel: () => AnotherObjectModel,
  searchable: undefined,
  label: 'Myself',
  reverse: () => AnotherObjectMyselfRelation,
  singularName: 'self',
  singularLabel: 'Self',
} as const;
export const AnotherObjectDeletedField = {
  kind: 'primitive',
  name: 'deleted',
  type: 'Boolean',
  description: undefined,
  list: false,
  nonNull: true,
  defaultValue: false,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnotherObjectDeletedAtField = {
  kind: 'primitive',
  name: 'deletedAt',
  type: 'DateTime',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
} as const;
export const AnotherObjectDeletedByField = {
  kind: 'relation',
  name: 'deletedBy',
  type: 'User',
  description: undefined,
  list: false,
  nonNull: false,
  defaultValue: undefined,
  args: [undefined],
  directives: [undefined],
  targetModel: async () => (await import('./user')).UserModel,
  asRelation: () => AnotherObjectDeletedByRelation,
} as const;
export const AnotherObjectDeletedByRelation = {
  name: 'deletedBy',
  field: AnotherObjectDeletedByField,
  sourceModel: () => AnotherObjectModel,
  targetModel: async () => (await import('./user')).UserModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => AnotherObjectDeletedByReverseRelation,
} as const;
export const AnotherObjectDeletedByReverseRelation = {
  name: 'deletedAnotherObjects',
  field: AnotherObjectDeletedByField,
  sourceModel: async () => (await import('./user')).UserModel,
  targetModel: () => AnotherObjectModel,
  searchable: undefined,
  label: 'Deleted By',
  reverse: () => AnotherObjectDeletedByRelation,
  singularName: 'deletedAnotherObject',
  singularLabel: 'Deleted Another Object',
} as const;
export const AnotherObjectModel = {
  kind: 'entity',
  name: 'AnotherObject',
  plural: 'AnotherObjects',
  description: undefined,
  root: false,
  parent: undefined,
  interfaces: [undefined],
  queriable: false,
  listQueriable: true,
  creatable: false,
  updatable: false,
  deletable: true,
  displayField: 'name',
  defaultOrderBy: undefined,
  deleted: false,
  oldName: undefined,
  pluralField: 'anotherObjects',
  slug: 'another-objects',
  labelPlural: 'Another Objects',
  label: 'Another Object',
  fields: [AnotherObjectIdField, AnotherObjectNameField, AnotherObjectMyselfField, AnotherObjectDeletedField, AnotherObjectDeletedAtField, AnotherObjectDeletedByField],
  fieldsByName: {
    id: AnotherObjectIdField,
    name: AnotherObjectNameField,
    myself: AnotherObjectMyselfField,
    deleted: AnotherObjectDeletedField,
    deletedAt: AnotherObjectDeletedAtField,
    deletedBy: AnotherObjectDeletedByField,
  },
  relations: [AnotherObjectMyselfRelation, AnotherObjectDeletedByRelation],
  relationsByName: {
    myself: AnotherObjectMyselfRelation,
    deletedBy: AnotherObjectDeletedByRelation,
  }
  ,
} as const;

