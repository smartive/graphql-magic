"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[462],{707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(4848),a=t(8453);const s={},i="Graphql querying",o={id:"graphql-client",title:"Graphql querying",description:"For autocompletion of your queries, you can create the following apollo.config.js file:",source:"@site/docs/7-graphql-client.md",sourceDirName:".",slug:"/graphql-client",permalink:"/graphql-magic/docs/graphql-client",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"sidebar",previous:{title:"Graphql server",permalink:"/graphql-magic/docs/graphql-server"},next:{title:"Permissions",permalink:"/graphql-magic/docs/permissions"}},c={},l=[{value:"Querying mechanisms",id:"querying-mechanisms",level:2},{value:"Server side",id:"server-side",level:3},{value:"Client side",id:"client-side",level:3},{value:"Mutations",id:"mutations",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"graphql-querying",children:"Graphql querying"}),"\n",(0,r.jsxs)(n.p,{children:["For autocompletion of your queries, you can create the following ",(0,r.jsx)(n.code,{children:"apollo.config.js"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"module.exports = {\n  client: {\n    service: {\n      name: 'your-project',\n      localSchemaFile: './src/generated/schema.graphql',\n    },\n    includes: ['./src/**/*.ts', './src/**/*.tsx'],\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"querying-mechanisms",children:"Querying mechanisms"}),"\n",(0,r.jsx)(n.h3,{id:"server-side",children:"Server side"}),"\n",(0,r.jsxs)(n.p,{children:["On the server side, and with ",(0,r.jsx)(n.code,{children:"next.js"})," server actions, a graphql api becomes unnecessary, and you can execute queries directly using ",(0,r.jsx)(n.code,{children:"executeGraphql"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { GetMeQuery, GetPostsQuery } from "@/generated/client";\nimport { GET_POSTS } from "@/graphql/client/queries/get-posts";\nimport { executeGraphql } from "@/graphql/execute";\n\nasync function Posts({ me }: { me: GetMeQuery[\'me\'] }) {\n  const { data: { posts } } = await executeGraphql<GetPostsQuery>({ query: GET_POSTS })\n\n  return <div>\n    {posts.map(post => <div key={post.id}>\n      <article>\n        <h2>{post.title}</h2>\n        <div>by {post.createdBy.username}</div>\n        <p>{post.content}</p>\n        <h4>Comments</h4>\n        {post.comments.map(comment => (<div key={comment.id}>\n          <div>{comment.createdBy.username}</div>\n          <p>{comment.content}</p> by {comment.createdBy.username}\n        </div>)\n        )}\n      </article>\n    </div>)}\n  </div>\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"client-side",children:"Client side"}),"\n",(0,r.jsxs)(n.p,{children:["On the client, you'd need to set up a graphql endpoint and then query it like any other graphql api, such as with ",(0,r.jsx)(n.a,{href:"https://www.apollographql.com/docs/react/get-started",children:(0,r.jsx)(n.code,{children:"@apollo/client"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { GetMeQuery, GetPostsQuery } from \"@/generated/client\";\nimport { GET_POSTS } from \"@/graphql/client/queries/get-posts\";\nimport { executeGraphql } from \"@/graphql/execute\";\nimport { gql, useQuery } from '@apollo/client';\n\nfunction Posts({ me }: { me: GetMeQuery['me'] }) {\n  const { loading, error, data } = useQuery<GetPostsQuery>({ query: GET_POSTS })\n\n  if (loading) {\n    return 'Loading...';\n  }\n  if (error) {\n    return `Error! ${error.message}`;\n  }\n\n  return <div>\n    {res?.data?.posts.map(post => <div key={post.id}>\n      <article>\n        <h2>{post.title}</h2>\n        <div>by {post.createdBy.username}</div>\n        <p>{post.content}</p>\n        <h4>Comments</h4>\n        {post.comments.map(comment => (<div key={comment.id}>\n          <div>{comment.createdBy.username}</div>\n          <p>{comment.content}</p> by {comment.createdBy.username}\n        </div>)\n        )}\n      </article>\n    </div>)}\n  </div>\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mutations",children:"Mutations"}),"\n",(0,r.jsxs)(n.p,{children:["Mutation queries are generated by ",(0,r.jsx)(n.code,{children:"graphql-magic"})," directly so you don't need to write them. They have a very simple structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export const CREATE_POST = gql`\n  mutation CreatePostMutation($data: CreatePost!) {\n    createPost(data: $data) { id }\n  }\n`;\n\nexport const UPDATE_POST = gql`\n  mutation UpdatePostMutation($id: ID!, $data: UpdatePost!) {\n    updatePost(where: { id: $id }, data: $data) { id }\n  }\n`;\n\nexport const DELETE_POST = gql`\n  mutation DeletePostMutation($id: ID!) {\n    deletePost(where: { id: $id })\n  }\n`;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { CreatePostMutationMutation, CreatePostMutationMutationVariables } from "@/generated/client";\nimport { CREATE_POST } from "@/generated/client/mutations";\nimport { executeGraphql } from "@/graphql/execute";\nimport { revalidatePath } from "next/cache";\n\nasync function CreatePost() {\n  async function createPost(formData: FormData) {\n    \'use server\'\n    await executeGraphql<CreatePostMutationMutation, CreatePostMutationMutationVariables>({\n      query: CREATE_POST,\n      variables: {\n        data: {\n          title: formData.get(\'title\') as string,\n          content: formData.get(\'content\') as string\n        }\n      }\n    })\n    revalidatePath(\'/\')\n  }\n\n  return <form action={createPost}>\n    <h2>New Post</h2>\n    <label>\n      <span>Title</span>\n      <input name="title" />\n    </label>\n    <label>\n      <span>Content</span>\n      <textarea rows={5} name="content" />\n    </label>\n    <div>\n      <button type="submit">Create</button>\n    </div>\n  </form>\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Just like with queries, if is necessary to perform mutations on the client, use a graphql client instead of ",(0,r.jsx)(n.code,{children:"executeGraphql"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);