"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[661],{5226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=t(4848),s=t(8453);const i={sidebar_position:1},a="Tutorial",o={id:"tutorial",title:"Tutorial",description:"Let's create a blog with graphql-magic!",source:"@site/docs/tutorial.md",sourceDirName:".",slug:"/tutorial",permalink:"/docs/tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar"},c={},d=[{value:"Setup",id:"setup",level:2},{value:"Code base",id:"code-base",level:3},{value:"Database setup",id:"database-setup",level:3},{value:"Auth setup",id:"auth-setup",level:3},{value:"Account setup",id:"account-setup",level:3},{value:"Content!",id:"content",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"tutorial",children:"Tutorial"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a blog with ",(0,r.jsx)(n.code,{children:"graphql-magic"}),"!"]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.h3,{id:"code-base",children:"Code base"}),"\n",(0,r.jsx)(n.p,{children:"First create a next.js website:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx create-next-app@latest magic-blog --ts --app --tailwind --eslint --src\ncd magic-blog\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For some styling install ",(0,r.jsx)(n.code,{children:"preline"})," and dependencies:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm i preline @tailwindcss/forms\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"@tailwindcss/forms"})," to ",(0,r.jsx)(n.code,{children:"tailwind.config.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  plugins: [\n    require('@tailwindcss/forms'),\n  ],\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"app/globals.css"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TODO\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"app/layout.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html>\n        <body>{children}</body>\n    </html>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"app/page.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export default function Page() {\n    return <div>\n        <h1>Magic Blog</h1>\n    </div>\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add this setting to ",(0,r.jsx)(n.code,{children:"next.config.mjs"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"const nextConfig = {\n    experimental: {\n        serverComponentsExternalPackages: ['knex'],\n    }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Install ",(0,r.jsx)(n.code,{children:"@smartive/graphql-magic"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install @smartive/graphql-magic\n"})}),"\n",(0,r.jsx)(n.p,{children:"Temporary:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm i @graphql-codegen/typescript-compatibility\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the gqm cli:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate\n"})}),"\n",(0,r.jsx)(n.p,{children:"Start the website:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.h3,{id:"database-setup",children:"Database setup"}),"\n",(0,r.jsxs)(n.p,{children:["Adapt the database ",(0,r.jsx)(n.code,{children:".env"})," variables to connect to a postgresql instance, or create a new one.\nFor example, to create a local instance with docker and docker-compose, create the following ",(0,r.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"version: '3.4'\nservices:\n  postgres:\n    image: postgres:13-alpine\n    shm_size: 1gb\n    environment:\n      POSTGRES_DB: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n      POSTGRES_HOST_AUTH_METHOD: trust\n      TZ: 'Europe/Zurich'\n    ports:\n      - '5432:5432'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then start it with ",(0,r.jsx)(n.code,{children:"docker-compose up"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Generate the first migration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate-migration\n"})}),"\n",(0,r.jsxs)(n.p,{children:['Enter "setup" as migration name. Or you could first create a ',(0,r.jsx)(n.code,{children:"feat/setup"})," git branch, then it would use that name automatically."]}),"\n",(0,r.jsx)(n.p,{children:"Run the migration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx env-cmd knex migrate:up\n"})}),"\n",(0,r.jsx)(n.h3,{id:"auth-setup",children:"Auth setup"}),"\n",(0,r.jsxs)(n.p,{children:["Set up a way for users to authenticate with your app.\nFor example, follow ",(0,r.jsx)(n.a,{href:"https://auth0.com/docs/quickstart/webapp/nextjs/01-login",children:"this tutorial"})," to set up auth0."]}),"\n",(0,r.jsxs)(n.p,{children:["Assuming you used auth0, here's a bare-bones version of what ",(0,r.jsx)(n.code,{children:"src/app/page.tsx"})," could look like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import { getSession } from \'@auth0/nextjs-auth0\';\n\nexport default async function Page() {\n  const session = await getSession();\n\n  return <div>\n      <h1>Welcome to my Blog</h1>\n      {session ? <a href="/api/auth/logout">Logout</a> : <a href="/api/auth/login">Login</a>}\n  </div>\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"It should now be possible for you to log in and out again."}),"\n",(0,r.jsx)(n.h3,{id:"account-setup",children:"Account setup"}),"\n",(0,r.jsx)(n.p,{children:"Now, we need to ensure that the user is stored in the database."}),"\n",(0,r.jsxs)(n.p,{children:["First extend the user model in ",(0,r.jsx)(n.code,{children:"src/config/models.ts"})," with the following fields:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    fields: [\n      {\n        name: 'authId',\n        type: 'String',\n        nonNull: true,\n      },\n      {\n        name: 'username',\n        type: 'String',\n        nonNull: true\n      }\n    ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"The models have changed, generate the new types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generate the new migration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate-migration\n"})}),"\n",(0,r.jsx)(n.p,{children:"Edit the generated migration, then run it"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx env-cmd knex migrate:up\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now let's implement the ",(0,r.jsx)(n.code,{children:"// TODO: get user"})," part in the ",(0,r.jsx)(n.code,{children:"src/graphql/execute.ts"})," file"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  const session = await getSession();\n  if (session) {\n    let dbUser = await db('User').where({ authId: session.user.sid }).first();\n    if (!user) {\n      await db('User').insert({\n        id: randomUUID(),\n        authId: session.user.sid,\n        username: session.user.nickname\n      })\n      dbUser = await db('User').where({ authId: session.user.sid }).first();\n    }\n    user = {\n      ...dbUser!,\n      role: 'ADMIN'\n    }\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Extend ",(0,r.jsx)(n.code,{children:"src/graphql/client/queries/get-me.ts"})," to also fetch the user's username:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { gql } from '@smartive/graphql-magic';\n\nexport const GET_ME = gql`\n  query GetMe {\n    me {\n      id\n      username\n    }\n  }\n`;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generate the new types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's modify ",(0,r.jsx)(n.code,{children:"src/app/page.tsx"})," so that it fetches the user from the database:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import { GetMeQuery } from "../generated/client";\nimport { GET_ME } from "../graphql/client/queries/get-me";\nimport { executeGraphql } from "../graphql/execute";\n\nexport default async function Page() {\n  const { data: { me }} = await executeGraphql<GetMeQuery>({ query: GET_ME });\n\n  return <div>\n      <h1>Welcome to my Blog</h1>\n      {me ? <div>Hello {me.username}! <a href="/api/auth/logout">Logout</a></div> : <a href="/api/auth/login">Login</a>}\n  </div>\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"content",children:"Content!"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a blog by adding new models in ",(0,r.jsx)(n.code,{children:"src/config/models.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  {\n    kind: 'entity',\n    name: 'Post',\n    listQueriable: true,\n    creatable: true,\n    updatable: true,\n    deletable: true,\n    fields: [\n      {\n        name: 'title',\n        type: 'String',\n        nonNull: true,\n        creatable: true,\n        updatable: true,\n      },\n      {\n        name: 'content',\n        type: 'String',\n        nonNull: true,\n        creatable: true,\n        updatable: true,\n      }\n    ]\n  },\n  {\n    kind: 'entity',\n    name: 'Comment',\n    creatable: true,\n    updatable: true,\n    deletable: true,\n    fields: [\n      {\n        kind: 'relation',\n        name: 'post',\n        type: 'Post',\n        nonNull: true,\n        creatable: true,\n      },\n      {\n        name: 'content',\n        type: 'String',\n        nonNull: true,\n        creatable: true,\n        updatable: true,\n      }\n    ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generate and run the new migrations and generate the new models:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx gqm generate-migration\nnpx env-cmd knex migrate:up\nnpx gqm generate\n"})}),"\n",(0,r.jsx)(n.p,{children:"new get-posts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { gql } from '@smartive/graphql-magic';\n\nexport const GET_POSTS = gql`\n  query GetPosts {\n    posts {\n        id\n        title\n        content\n        createdBy {\n            username\n        }\n        comments {\n            id\n            createdBy {\n                username\n            }\n            content\n        }\n    }\n  }\n`;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"{me &&       <CreatePost/>  }\n      <Posts/>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"async function CreatePost() {\n  async function createPost(formData: FormData) {\n    'use server'\n    await executeGraphql<CreatePostMutationMutation, CreatePostMutationMutationVariables>({\n      query: CREATE_POST,\n      variables: {\n        data: {\n          title: formData.get('title') as string,\n          content: formData.get('content') as string\n        }\n      }\n    })\n    revalidatePath('/')\n  }\n\n  return <form action={createPost}>\n    <h2>New Post</h2>\n    <div>\n      <span>Title</span>\n      <input name=\"title\" />\n    </div>\n    <div>\n      <span>Content</span>\n      <textarea rows={5} name=\"content\" />\n    </div>\n    <div>\n      <button type=\"submit\">Create</button>\n    </div>\n  </form>\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"async function Posts() {\n  const { data: { posts } } = await executeGraphql<GetPostsQuery>({ query: GET_POSTS })\n\n  return <div>\n    {posts.map(post => <div key={post.id}>\n      <article>\n        <h3>{post.title}</h3>\n        <div>{post.createdBy.username}</div>\n        <div>{post.content}</div>\n        {post.comments.map(comment => (<div key={comment.id}>\n          <div>{comment.createdBy.username}</div>\n          <p>{comment.content}</p> by {comment.createdBy.username}\n        </div>)\n        )}\n        <CreateComment postId={post.id} />\n      </article>\n    </div>)}\n  </div>\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"function CreateComment({ postId }: { postId: string }) {\n  async function createComment(formData: FormData) {\n    'use server'\n\n    const res = await executeGraphql<CreateCommentMutationMutation, CreateCommentMutationMutationVariables>({\n      query: CREATE_COMMENT,\n      variables: {\n        data: {\n          postId,\n          content: formData.get('content') as string\n        }\n      }\n    })\n    console.log(res)\n    revalidatePath('/')\n  }\n  return <form action={createComment}>\n    <div>\n      <textarea name=\"content\" placeholder=\"Leave a comment...\" />\n    </div>\n    <div>\n      <button type=\"submit\">Send</button>\n    </div>\n  </form>\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);